{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","renderItems","fizzBuzz","getOddNumbers","bind","onClickA","onClickB","hasNumbers","getFizzBuzz","numbers","x","push","val","isMultiple5","this","setState","length","out","console","log","className","onClick","map","item","key","v","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,4ICgI5BC,G,wBA1Hb,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KACAC,MAAQ,CACXC,YAAa,GACbC,SAAU,IAGZ,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAChB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKI,YAAc,EAAKA,YAAYJ,KAAjB,gBAXF,E,6EAelB,IADA,IAAIK,EAAU,GACLC,EAAI,EAAGA,GAAK,IAAKA,IAEpBA,EAAI,IAAM,GAGZD,EAAQE,KAAK,CACXC,IAAKF,EACLG,YAAaH,EAAI,IAAM,IAM7B,OAAOD,I,iCAIP,IAAMR,EAAca,KAAKX,gBACzBW,KAAKC,SAAS,CAACd,kB,iCAKfa,KAAKC,SAAS,CAACd,YADK,O,mCAMpB,OADsBa,KAAKd,MAApBC,YACYe,OAAS,I,oCAK5B,IADA,IAAMC,EAAM,GACJP,EAAI,EAAGA,GAAK,IAAKA,IAAK,CAC5B,IAAIE,EAAMF,EACNA,EAAI,IAAM,GAAKA,EAAI,IAAM,EAC3BE,EAAM,WACGF,EAAI,IAAM,EACnBE,EAAM,OACGF,EAAI,IAAM,IACnBE,EAAM,QAGRK,EAAIN,KAAKC,GAEX,OAAOK,I,0CAIP,IAAMf,EAAWY,KAAKN,cACtBM,KAAKC,SAAS,CAACb,e,+BAGP,IAAD,EAEyBY,KAAKd,MAA9BC,EAFA,EAEAA,YAAaC,EAFb,EAEaA,SAEpB,OADAgB,QAAQC,IAAIlB,GAGV,yBAAKmB,UAAU,OACb,0DACA,sCACA,4CACA,sFACA,wBAAIA,UAAU,QACZ,kEACA,iFACA,mFACA,8HACA,iHAEF,wCACA,6BACIN,KAAKP,aACL,4BAAQa,UAAU,iBAAiBC,QAASP,KAAKR,UAAjD,SACG,4BAAQc,UAAU,iBAAiBC,QAASP,KAAKT,UAAjD,YACJJ,EAAYqB,KAAI,SAACC,GAChB,OAAQ,uBAAGC,IAAKD,EAAKX,IAAKQ,UAAWG,EAAKV,YAAc,YAAc,IACrEU,EAAKX,SAMV,iDACA,4CACA,wGAA6E,6BAA7E,iCACgC,mCADhC,0BACkE,6BADlE,iCAEgC,mCAFhC,0BAEkE,6BAFlE,0DAGyD,uCAHzD,2BAIA,wCACA,6BACGV,EAASoB,KAAI,SAACG,GACb,OACE,2BAAIA,Y,GA/GAC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bf55a88d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component  {\n\n  constructor (props) {\n    super(props)\n     this.state = {\n       renderItems: [],\n       fizzBuzz: []\n     }\n\n     this.getOddNumbers = this.getOddNumbers.bind(this)\n     this.onClickA = this.onClickA.bind(this)\n     this.onClickB = this.onClickB.bind(this)\n     this.hasNumbers = this.hasNumbers.bind(this)\n     this.getFizzBuzz = this.getFizzBuzz.bind(this)\n  }\n  getOddNumbers() {\n    let numbers = []\n    for (let x = 1; x <= 100; x++) {\n      // if even skip\n      if (x % 2 === 0) {\n        continue\n      } else {\n        numbers.push({\n          val: x,\n          isMultiple5: x % 5 === 0 ? true : false\n        })\n      }\n\n    }\n\n    return numbers\n  }\n\n  onClickA () {\n    const renderItems = this.getOddNumbers()\n    this.setState({renderItems})\n  }\n\n  onClickB () {\n    const renderItems = []\n    this.setState({renderItems})\n  }\n\n  hasNumbers () {\n    const {renderItems} = this.state\n    return renderItems.length > 0\n  }\n\n  getFizzBuzz() {\n    const out = []\n    for(let x = 1; x <= 100; x++) {\n      let val = x\n      if (x % 3 === 0 && x % 5 === 0) {\n        val = 'FizzBuzz'\n      } else if (x % 3 === 0) {\n        val = 'Fizz'\n      } else if (x % 5 === 0) {\n        val = 'Buzz'\n      }\n\n      out.push(val)\n    }\n    return out\n  }\n\n  componentDidMount () {\n    const fizzBuzz = this.getFizzBuzz()\n    this.setState({fizzBuzz})\n  }\n\n  render (){\n\n    const {renderItems, fizzBuzz} = this.state\n    console.log(renderItems)\n    return (\n\n      <div className=\"App\">\n        <h1>Healthcare interview tests</h1>\n        <h2>Test 1</h2>\n        <h3>Requirements</h3>\n        <p>Write a program (in 20-30mins) that does the following:</p>\n        <ol className=\"list\">\n          <li>Renders Button A (green in colour)</li>\n          <li>On clicking Button A prints odd numbers up to 100</li>\n          <li>Prints numbers that are multiples of 5 in blue text</li>\n          <li>After clicking Button A and printing the numbers a red reset button should be rendered instead</li>\n          <li>Clicking the Reset button should clear the printed number and re-render Button A</li>\n        </ol>\n        <h3>Solution</h3>\n        <div>\n          { this.hasNumbers() ? (\n            <button className=\"button buttonB\" onClick={this.onClickB}>Reset</button>\n          ) : (<button className=\"button buttonA\" onClick={this.onClickA}>Button A</button>)}\n          {renderItems.map((item) => {\n            return (<p key={item.val} className={item.isMultiple5 ? 'highlight' : ''}>\n            {item.val}\n            </p>)\n          })}\n        </div>\n\n\n        <h2>Test 2: Fizz Buzz</h2>\n        <h3>Requirements</h3>\n        <p>Write a short program that prints each number from 1 to 100 on a new line.<br />\n          For each multiple of 3, print <q>Fizz</q> instead of the number.<br />\n          For each multiple of 5, print <q>Buzz</q> instead of the number.<br />\n          For numbers which are multiples of both 3 and 5, print <q>FizzBuzz</q> instead of the number.</p>\n        <h3>Solution</h3>\n        <div>\n          {fizzBuzz.map((v) => {\n            return (\n              <p>{v}</p>\n            )})}\n        </div>\n      </div>\n\n\n\n\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}